name: GH Actions CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  # Commits to develop/master will cancel each other, but PRs will only cancel
  # commits within the same PR
  group: "${{ github.ref }}-${{ github.head_ref }}-${{ github.workflow }}"
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

jobs:
  gen_matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.get-mdakits.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - id: get-python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - id: get-mdakits
        run: |
          mdakit=$(python utils/get_dir_matrix.py)
          echo "::set-output name=matrix::${mdakit}"

  mdakit-ci:
    needs: gen_matrix
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        mdakit: ${{fromJSON(needs.gen_matrix.outputs.matrix)}}
        jobstep: ['latest', 'develop']
    steps:
      - uses: actions/checkout@v3

      - id: prev-python-ver
        uses: MDAnalysis/get-latest-python-version@main
        with:
          last-n-minor-release: 1

      - id: get-base-python-deps
        run: |
          pip install pyyaml packaging

      - id: check-set-python-bounds
        continue-on-error: true
        run: |
          basepy=${{steps.prev-python-ver.outputs.python-version}}
          pyver=$(python utils/checkpython-ver.py --mdakit "${{matrix.mdakit}}" --maxpyver ${basepy})
          echo "PYVER=${pyver}" >> $GITHUB_ENV
          
      - id: install-conda-env
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ env.PYVER }}
          add-pip-as-python-dependency: true
          architecture: x64
          mamba-version: "*"
          channels: conda-forge, defaults
          channel-priority: flexible
          auto-update-conda: true
          show-channel-urls: true

      - id: install-conda-base-deps
        run: |
          mamba install pyyaml

      - id: install-mdakit
        continue-on-error: true
        run: |
         if [[ ${{ matrix.jobstep }} == "develop" ]]; then
           field="src_install"
         else
           field="install"
         fi
      
         install=$(python utils/extract-yaml.py --field ${field} --mdakit ${{matrix.mdakit}})
         echo "install=${install}"
         eval ${install}

      - id: install-test-deps
        continue-on-error: true
        run: |
          install=$(python utils/extract-yaml.py --field "test_dependencies" --mdakit ${{matrix.mdakit}})
          echo "install tests:${install}"
          eval ${install}

      - id: install-mdanalysis
        uses: MDAnalysis/install-mdanalysis@main
        continue-on-error: true
        with:
          version: ${{ matrix.jobstep }}
          install-tests: false
          installer: mamba
          shell: bash -l {0}

      - id: run-tests
        continue-on-error: true
        run: |
          tests=$(python utils/extract-yaml.py --field "run_tests" --mdakit ${{matrix.mdakit}})
          echo "tests: ${tests}"
          eval ${tests}

      - id: store-errors
        run: |
          echo "python_bounds=${{ steps.check-set-python-bounds.outcome }}" >> $GITHUB_ENV
          echo "mdakit_install=${{ steps.install-mdakit.outcome }}" >> $GITHUB_ENV
          echo "tests_install=${{ steps.install-test-deps.outcome }}" >> $GITHUB_ENV
          echo "mda_install=${{ steps.install-mdanalysis.outcome }}" >> $GITHUB_ENV
          echo "test_out=${{ steps.run-tests.outcome }}" >> $GITHUB_ENV

      - id: access-errors
        shell: python
        run: |
          import os
          import json

          return_dict = {}

          return_dict['python'] = os.environ['python_bounds']
          return_dict['mdakit_install'] = os.environ['mdakit_install']
          return_dict['test_install'] = os.environ['test_install']
          return_dict['mda_install'] = os.environ['mda_install']
          return_dict['tests'] = os.environ['test_out']
          print(json.dumps(return_dict))
